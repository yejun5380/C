p.61
~~~c
#include <stdlib.h> //c표준 유틸리티 함수들을 모아놓은 헤더파일
#include <stdio.h> //표준입출력에 관한 함수들이 정의되어있는 헤더파일
#include <time.h> //시간 값을 받아오는 헤더파일

int coin_toss (void); //변수 선언

int main(void) //실행 구문
{
  int toss; //변수 선언
  int heads = 0; //변수 선언
  int tails = 0; //변수 선언
  srand((unsigned)time(NULL)); //시간 값을 이용하여 양수인 랜덤값을 생성 

  for (toss = 0; toss < 100; toss++) //토스라는 변수를 0으로 초기화하고 반복할 때마다 1씩 증가하여 토스가 99가 될 때 까지 총 100번 반복한다
{
    if (coin_toss() == 1) // return 받은 head값에 대한 조건
          heads++;        // head값이 나머지가 1일 경우에 heads에 1증가
    else                  
          tails++;        //head값이 1이 아닐 경우에 tails에 1증가
}

printf("동전의 앞면: %d \n", heads); //"동전의 앞면 : heads값" 출력
printf("동전의 뒷면: %d \n", tails); //"동전의 뒷면 : tails값" 출력
return 0;

}
int coin_toss( void ) //
{
  int head = rand() % 2; //랜덤 값을 생성하여 2로 나눈 나머지 값을 head에 넣어준다
  return head; //head값을 반환해준다
}
~~~
p.66
~~~c
#include <stdlib.h> //c표준 유틸리티 함수들을 모아놓은 헤더파일
#include <stdio.h> //표준입출력에 관한 함수들이 정의되어있는 헤더파일
#include <conio.h> //콘솔 입출력 함수를 제공하는 헤더
#include <time.h> //시간 값을 받아오는 헤더파일

void disp_car(int car_number, int distance) //오버로딩으로 int car_number, int distance에 맞는 데이터 타입과 개수가 일치하면 구문 실행
{
  int i; //변수 선언
  printf("CAR #%d:", car_number); //car_number 값 출력
  for( i = 0; i < distance/10; i++ ) //i값을 0으로 초기화 하며 rand()%100의 나머지 값 나누기 10만큼 반복하며 반복할 때마다 i값 1씩증가
  {
        printf("*");//반복되는 개수만큼 *출력
  }
  printf("\n"); //반복문이 끝날 때 엔터
}

int main(void) //실행 구문
{ int i; //변수 선언
  int car1_dist=0, car2_dist=0; // 변수 선언 및 초기화
  
  srand( (unsigned)time( NULL ) ); //시간 값을 이용하여 양수인 랜덤값을 생성 

  for( i = 0; i < 6; i++ ) //i를 0으로 초기화하고 반복문이 돌며 1씩증가하요 i가 5가 될 때 멈춘다
  {  car1_dist += rand() % 100; //car1_dist = car1_dist + 랜덤값에 100을 나눈 나머지값
    car2_dist += rand() % 100; //car2_dist = car2_dist + 랜덤값에 100을 나눈 나머지값
    disp_car(1, car1_dist); // 1은 car_number이며 car1_dist는 distamce로 값이 들어간다
    disp_car(2, car2_dist); // 2는 car_number이며 car2_dist는 distance로 값이 들어간다
    printf("---------------------\n");
    _getch(); // 콘솔 입력을 사용하기 때문에 표준 입력 버퍼에 저장되지 않고 입력된 값을 바로바로 반환
  }
  return 0;
}
~~~
p.67 자동차를 3개로 늘려보자
~~~c
#include <stdlib.h> 
#include <stdio.h> 
#include <conio.h> 
#include <time.h>

void disp_car(int car_number, int distance)
{
  int i; //변수 선언
  printf("CAR #%d:", car_number); 
  for( i = 0; i < distance/10; i++ ) 
  {
        printf("*");
  }
  printf("\n"); 
}

int main(void) 
{ int i; 
  int car1_dist=0, car2_dist=0, car3_dist=0;
  
  srand( (unsigned)time( NULL ) );
  
  for( i = 0; i < 6; i++ ) 
  {  car1_dist += rand() % 100; 
    car2_dist += rand() % 100;
    car3_dist += rand() % 100;
    disp_car(1, car1_dist); 
    disp_car(2, car2_dist); 
    disp_car(3, car3_dist);
    printf("---------------------\n");
    _getch(); 
  }
  return 0;
}
~~~
p.73
~~~c
#include <math.h> //수학 함수를 사용할 수 있게하는 파일
#include <stdio.h> //표준입출력에 관한 함수들이 정의되어있는 헤더파일

int main( void ) //실행 구문
{
  double pi = 3.1415926535; // pi변수 선언 하며 double을 사용함으로써 소수점까지 값이 들어간다
  double x, y; //변수 선언
  
  x = pi / 2; //pi값에 2를 나누어 x값에 1.570796이 들어감
  y = sin( x ); //3에서 2로 나누면 1.570796이므로 0.017452406이 y값에 들어감
  printf( "sin( %f ) = %f\n", x, y );//사인(1.570796)와 1출룍
  y = cos( x ); //cos1.570796으로 0이 y값에 들어감
  printf( "cos( %f ) = %f\n", x, y ); //cos(1.570796), 0출력
} 
~~~
p.76
~~~c
#include <stdlib.h> //c표준 유틸리티 함수들을 모아놓은 헤더파일
#include <stdio.h> //표준입출력에 관한 함수들이 정의되어있는 헤더파일

int main(void)//실행 구문
{
  system("dir");//디렉토리를 보여주는 창
  printf("아무 키나 치세요\n"); //"아무 키나 치세요" 
  _getch(); // 콘솔 입력을 사용하기 때문에 표준 입력 버퍼에 저장되지 않고 입력된 값을 바로바로 반환
  system("cls"); //출력됐던 부분 삭제

  return 0;
}
~~~
p.78
~~~c
#include <stdio.h> //표준입출력에 관한 함수들이 정의되어있는 헤더파일
#include <time.h> //시간 값을 받아오는 헤더파일

int main(void) // 실행구문
{
  time_t start, end; // time_t는 unsigned long과 동일하다
  start = time(NULL); //초 단위의 값을 start에 값을 넣는다
  printf("10초가 되면 아무 키나 누르세요\n"); //"10초가 되면 아무 키나 누르새요"출력
  while (1) //계속해서 실행한다는 뜻
  {
    if (getchar()) //문자열을 받으면
      break; // 종료
  }
  printf("종료되었습니다.\n"); //"종료되었습니다"출력
  end = time(NULL); //초 단위 값을 엔드에 넣는다
  printf("경과된 시간은 %ld 초입니다. \n", end - start); // 엔드의 초와 스타트의 초를 뺀 것이 같이 출력
  return 0;
}
~~~
p.80
~~~c
#define _CRT_SECURE_NO_WARNINGS //c++ 기본 파일의 한 부분이며 안전한 함수가 만들어졌으니 사용하라는 
#include <math.h> //수학 함수를 사용할 수 있게하는 파일
#include <stdio.h> //표준입출력에 관한 함수들이 정의되어있는 헤더파일

int main(void) //실행 구문
{
  double height, distance, tree_height, degrees, radians; // 변수선언

  printf("나무와의 길이(단위는 미터): "); //"나무와의 길이(단위는 미터):" 출력
  scanf("%lf", &distance); //사용자의 값을 입력받음

  printf("측정자의 키(단위는 미터): "); //"측정자의 키(단위는 미터):" 출력
  scanf("%lf", &height); //사용자의 값을 입력받음

  printf("각도(단위는 도): "); //"각도(단위는 도):" 출력
  scanf("%lf", &degrees); //사용자의 값을 입력받음

  radians = degrees * (3.141592 / 180.0); //입력 받은 각도 값 *  (3.141592 / 180.0)값이 radians에 들어감
  
  tree_height = tan(radians) * distance + height; //계산된 값이 tree_heiht에 들어감
  printf("나무의 높이(단위는 미터): %lf \n", tree_height); //tree_heiht 값이 문구와 함계 

  return 0;
}
~~~
p.82
~~~c
#include <stdio.h> //표준입출력에 관한 함수들이 정의되어있는 헤더파일
#include <math.h> //수학 함수를 사용할 수 있게하는 파일
#define PI 3.141592 //전처리기이며 코드를 컴파일하기 전에 실행됨을 의미

double rad(double degree) //오버로딩으로 double형태로 매개변수의 갯수와 이름이 같아야 실행
{
  return PI * degree / 180.0; //계산문
}

void drawbar(int height) //오버로딩으로 int형태로 매개변수의 갯수와 이름이 같아야 실행
{
  for (int i = 0; i < height; i++) //(int)(60 sin(rad((double)degree))+0.5)의 값만큼 반복
    printf("*"); //*출력
  printf("\n"); //엔터
}

int main(void) //실행 구문
{
  int degree, x, y; //변수 선언
  for (degree = 0; degree <= 90; degree += 10) //degree갑을 0으로 초기화 하고 10씩 증가하여 90에서 반복문 종료  
  {
      // 싸인값은 -1.0에서 1.0이므로 정수로 반올림하여서 증폭한다.
    y = (int)(60 * sin(rad((double)degree)) + 0.5); //계산문
    drawbar(y); //오버로딩 형태로 위의 값이 
  }
  return 0;
}
~~~
p.86
~~~c
#include<stdio.h> //표준입출력에 관한 함수들이 정의되어있는 헤더파일
#include<math.h> //수학 함수를 사용할 수 있게하는 파일

int menu(void) //1~7까지의 값을 입력
{
  int n; //변수 선언
  printf("1.팩토리얼\n"); //"1.팩토리얼" 출력
  printf("2.싸인\n"); //"2.싸인" 출력
  printf("3.로그(base 10)\n"); //"3.로그(base 10)" 출력
  printf("4.제곱근\n"); //"4.제곱근\n" 출력
  printf("5.순열(nPr)\n"); //"5.순열(nPr)" 출력
  printf("6.조합(nCr)\n"); //"6.조합(nCr)" 출력
  printf("7.종료\n"); //"7.종료" 출력
  printf("선택해주세요: "); //"선택해주세요" 출력
  scanf("%d", &n); //자신이 입력하고싶은 변수 n을 입력하는 코드
  return n;
}

void factorial() //1을 입력했을 때 실행
{
  long n, result=1,i; //변수 선언
  printf("정수를 입력하시오: "); //"정수를 입력하시오:" 출력
  scanf("%lld", &n); //사용자 값 입력
  for (i = 1; i <= n; i++) //사용자가 입력한 값만큼 반복
    result = result * i; //계산문
  printf("결과 = %lld\n\n", result); //계산된 result값을 출력
}
  void sine() //2를 압력했을때 실행
{
  double a, result; //변수 선언
  printf("각도를 입력하시오: "); //"각도를 입력하시오: " 출력
  scanf("%lf", &a); //사용자 값 입력
  result = sin(a); //sin(입력한 값)이 result에 들어감
  printf("결과 = %lf\n\n", result); //"결과 = result 값" 출력
}

void logBase10() //3을 입력했을 때 실행
{
  double a, result; //변수 선언
  printf("실수값을 입력하시오: "); //"실수값을 입력하시오:" 출력
  scanf("%lf", &a); //사용자 값 입룍
  if (a <= 0.0) //a가 0.0보다 같거나 작을때
    printf("오류\n"); //"오류" 출력
  else //0.0보다 크면
  {
    result = log10(a); //log10(입력한 값)이 result에 들어감
    printf("결과 = %lf\n\n", result); //"결과 = result 값 " 출력
  }
}

int main(void) //실행 구문
{
  while (1) //계속해서 반복
  {
      switch (menu()) //선택형 조건문
      {
      case 1: //1을 입력했을 때
              factorial(); //실행
              break; //실행하면 끝
      case 2: //2를 입력했을 때
              sine(); //실행
              break; //실행하면 끝
      case 3: //3을 입력했을 때
              logBase10(); //실행
              break; //실행하면 끝
      case 7: //7을 입력했을 때
              printf("종료합니다.\n"); //"종료합니다."츨력
              return 0;
      default: //1,2,3,7 이외의 값을 입력했을때
              printf("잘못된 선택입니다.\n"); //"잘못된 선택입니다." 출력
              break;//실행하면 끝
        }
    }
}
~~~
